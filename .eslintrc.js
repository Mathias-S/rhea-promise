/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "extends": [
        "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.json",
        "sourceType": "module"
    },
    "plugins": [
        "eslint-plugin-no-null",
        "jsdoc",
        "@typescript-eslint",
        "@typescript-eslint/tslint"
    ],
    "root": true,
    overrides: [
        {
            files:
                [
                    'lib/**/*.ts',
                    'examples/**/*.ts',
                    'test/**/*.ts',
                ],

            "rules": {
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/explicit-function-return-type": [
                    "error",
                    {
                        "allowExpressions": false,
                        "allowTypedFunctionExpressions": false,
                        "allowHigherOrderFunctions": false,
                        "allowDirectConstAssertionInArrowFunctions": true,
                        "allowConciseArrowFunctionExpressionsStartingWithVoid": true
                    }
                ],
                "@typescript-eslint/explicit-module-boundary-types": [
                    "error",
                    {
                        "allowArgumentsExplicitlyTypedAsAny": true,
                        "allowDirectConstAssertionInArrowFunctions": true,
                        "allowHigherOrderFunctions": false,
                        "allowTypedFunctionExpressions": false
                    }
                ],
                "@typescript-eslint/indent": ["error", 2],
                "@typescript-eslint/member-delimiter-style": [
                    "error",
                    {
                        "multiline": {
                            "delimiter": "semi",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                ],
                "@typescript-eslint/member-ordering": "error",
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "variable",
                        "format": [
                            "camelCase",
                            "UPPER_CASE"
                        ],
                        "leadingUnderscore": "allow",
                        "trailingUnderscore": "forbid"
                    }
                ],
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-unused-expressions": "error",
                "@typescript-eslint/no-unused-vars": "off",
                "@typescript-eslint/semi": [
                    "error",
                    "always"
                ],
                "@typescript-eslint/tslint/config": [
                    "error",
                    {
                        "rules": {
                            "whitespace": true
                        }
                    }
                ],
                "@typescript-eslint/type-annotation-spacing": "error",
                "@typescript-eslint/typedef": [
                    "error",
                    {
                        "parameter": true,
                        "propertyDeclaration": true,
                        "memberVariableDeclaration": true
                    }
                ],
                "arrow-parens": [
                    "error",
                    "always"
                ],
                "brace-style": [
                    "error",
                    "1tbs"
                ],
                "curly": [
                    "error",
                    "multi-line"
                ],
                "dot-notation": "off",
                "eol-last": "error",
                "eqeqeq": [
                    "error",
                    "smart"
                ],
                "id-denylist": [
                    "error",
                    "any",
                    "Number",
                    "number",
                    "String",
                    "string",
                    "Boolean",
                    "boolean",
                    "Undefined",
                    "undefined"
                ],
                "id-match": "error",
                "indent": "off",
                "jsdoc/check-alignment": "error",
                "jsdoc/check-indentation": "error",
                "new-parens": "error",
                "no-empty": "error",
                "no-empty-function": "off",
                "no-fallthrough": "error",
                "no-invalid-this": "error",
                "no-new-wrappers": "error",
                "no-null/no-null": "error",
                "no-redeclare": "error",
                "no-return-await": "error",
                "no-trailing-spaces": "error",
                "no-underscore-dangle": "off",
                "no-unsafe-finally": "error",
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "no-var": "error",
                "one-var": [
                    "error",
                    "never"
                ],
                "prefer-const": "error",
                "semi": "off",
                "spaced-comment": [
                    "error",
                    "always",
                    {
                        "markers": [
                            "/"
                        ]
                    }
                ],
                "use-isnan": "error",

            },
        }
    ],
    "ignorePatterns": [
        // '.eslintrc.js',
        "test/**",
        "tsconfig.json"
    ]
}
